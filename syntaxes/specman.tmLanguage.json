{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "specman-e",
	"patterns": [
		{"include": "#code-block"},
		{"include": "#non-code-doc"}
	],
	"repository": {
		"code-block": {
			"begin": "^\\<\\'",
			"beginCaptures": {"0":{"name": "markup.bold.specman"}},
			"end": "^\\'\\>",
			"endCaptures": {"0":{"name": "markup.bold.specman"}},
			"patterns": [
				{ "include": "#comments" },
				{ "include": "#statements" },
				{ "include": "#types"	 },
				{ "include": "#literals" },
				{ "include": "#punctuation" }
			]
		},
		"statements":{
			"patterns": [
				{
					"comment": "Struct or Unit declaration",
					"name": "meta.class.declaration.specman",
					"begin": "\\b(struct|unit)\\b",
					"beginCaptures": {"0": {"name": "storage.type.class.specman"}},
					"patterns": [
						{
							"name": "keyword.control.specman",
							"match": "\\b(like)\\b"
						},
						{
							"match": "\\b([a-zA-Z0-9_]+)(\\')([a-zA-Z0-9_]+)\\b",
							"captures": {
								"1": {"name":"entity.name.tag.specman"},
								"3": {"name": "entity.name.type.specman" }
							}
						},
						{
							"name": "entity.name.type.specman",
							"match": "\\b([a-zA-Z0-9_]+)\\b"
						}
					],
					"end": "\\{"
				},
				{
					"comment": "Extend struct or Unit declaration",
					"name": "meta.class.declaration.specman",
					"begin": "\\b(extend)\\b",
					"beginCaptures": {"0": {"name": "storage.modifier.specman"}},
					"patterns": [
						{
							"match": "\\b([a-zA-Z0-9_]+)(\\')([a-zA-Z0-9_]+)\\b",
							"captures": {
								"1": {"name":"entity.name.tag.specman"},
								"3": {"name": "entity.name.type.specman" }
							}
						},
						{
							"name": "entity.name.type.specman",
							"match": "\\b([a-zA-Z0-9_]+)\\b"
						}
					],
					"end": "\\{"
				},
				{
					"comment": "Type declaration",
					"begin": "\\b(type)\\s+([a-zA-Z0-9_]+)\\b",
					"beginCaptures": {"1":{"name": "storage.modifier.type.specman"},
									  "2":{"name": "entity.name.type.specman"}},
					"patterns": [
						{ "include": "#literals" }
					],
					"end": "\\;"
				},
				{
					"comment": "Verilog-like macro definition",
					"begin": "\\b(`?define)\\s+([a-zA-Z0-9_]+)\\b",
					"beginCaptures": {"1":{"name":"string.other.specman"},
									  "2":{"name":"entity.name.function.specman"}},
					"patterns": [
						{
							"match": ".*",
							"name":"entity.other.specman"
						}
					],
					"end": "\\n"
				},
				{
					"comment": "Complex macro definition",
					"begin": "\\b(define)\\s+<([a-zA-Z0-9_]+)'([a-zA-Z0-9_]+)>\\s+",
					"beginCaptures": {"1":{"name":"string.other.specman"},
									  "2":{"name":"entity.name.type.specman"},
									  "3":{"name":"storage.type.specman"}},

					"patterns": [
						{
							"name": "keyword.control.specman",
							"match": "\\b(as(?:(\\s+computed))?)\\b"
						},
						{ "include": "#statements" 	   },
						{ "include": "#struct-members" },
						{ "include": "#strings" 	   }
					],
					"end": ";"
				},
				{
					"include": "#struct-members"
				}
			]
		},
		"non-code-doc": {
			"name": "comment.block.documentation.specman",
			"match": ".*"
		},
		"struct-members": {
			"patterns": [
				{
					"comment": "Event declaration",
					"begin": "\\b(event)\\s+([a-zA-Z0-9_]+)\\s+(is(?:(\\s+only\\s+)?))\\b",
					"beginCaptures": {"1":{"name":"storage.modifier.specman"},
									  "2":{"name":"entity.name.type.specman"},
									  "3":{"name":"storage.modifier.specman"}
									 },
					"patterns": [
						{"include": "#strings"}
					],
					"end": "\\;"
				}
			]
		},
		"comments":{
			"patterns": [
				{
					"name": "comment.line.double-dash.specman",
					"begin": "\\-\\-",
					"beginCaptures": {
						"0" : {"name": "\\bpunctuation.definition.comment.specman"}
					},
					"end" : "$\\n?"
				},
				{
					"name": "comment.line.double-slash",
					"begin": "\\/\\/",
					"beginCaptures": {
						"0" : {"name": "punctuation.definition.comment.specman"}
					},
					"end" : "$\\n?"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.specman",
					"match": "\\b(if|then|else|while|for|case|return|repeat|do|continue|break|until)\\b"
				},
				{
					"name": "keyword.control.specman",
					"match": "\\b(unit|struct|sequence|extend)\\b"
				}
			]
		},
		"types": {

		},
		"literals": {
			"patterns":[
				{ "include": "#strings" },
				{ "include": "#numbers"},
				{ "include": "#kwd-literals"}
			]
		},
		"strings": {
			"patterns":[
				{
					"name": "string.quoted.double.specman",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.specman",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single.specman",
					"match": "\\'[^\n]*\\'"
				}
			]
		},
		"numbers" :{
			"patterns": [
				{
					"comment": "Constant floating point numbers",
					"name": "constant.numeric.float.specman",
					"match": "\\b[0-9]+(\\.[0-9]*)((e|E)-?\\d+)?\\b"
				},
				{
					"comment": "Contant integer literals",
					"name": "constant.numeric.integer.specman",
					"match": "\\b[1-9][0-9]*\\b"
				}
			]
		},
		"kwd-literals" : {
			"patterns": [
				{
					"comment": "Boolean literal",
					"name": "constant.language.true.specman",
					"match": "\\b(TRUE)\\b"
				},
				{
					"comment": "Boolean literal",
					"name": "constant.language.false.specman",
					"match": "\\b(FALSE)\\b"
				},
				{
					"comment": "Boolean literal",
					"name": "constant.language.nullptr.specman",
					"match": "\\b(UNDEF)\\b"
				}
			]
		},
		"punctuation":{
			"patterns": [
				{
					"name": "punctuation.separator.dot-access.specman",
					"match": ";|:|,"
				},
				{
					"name": "markup.italic.specman",
					"match": "%|\\!"
				}
			]
		}
	},
	"scopeName": "source.specman"
}